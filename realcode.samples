taken from OpenSSL 1.0.2s (28 May 2019)

1:
X3 = (X1 + (X4 << 3)) & -1;
if (X3 < X1)
	X2++;
X2 += X4 >> 29;
X1 = X3;

2:
X1 = X2 / 64;
if (X1 > 0) {
	X1 = X1 * 64;
	X3 = X3 = X1;
	X2 = X2 - X1;
}
if (X2 != 0) {
	X6 = X4;
	X5 = X2;
}

3:
if (X1 >= 64 || X1 + X4 >= 64) {
  X4 = 64 - X4;
  X3 = X3 + X4;
  X1 = X1 - X4;
  X2 = 0;
} else {
  X2 = X2 + X1;
}


4:
if (X1 != 0) {
	if ((X1 + X2) >= X4) {
		X3 = X3 + (X4 - X1);
		X2 = X2 - (X4 - X1);
		X1 = 0;
	} else {
		X1 += X2;
	}
}

5:
X1 = X2;
while (X4 >= X3) {
	X5 = x5 + X3;
	X4 = x4 - X3;
}
X6 = X4;

6:
X1 = X3;
X2 = 0;
while (X2 < 16) {
	X4 = X8;
	X7 = X9;
	X5 = X7;
	X6 = X7 ^ X10;
	X2++;
}

7:
X1 = 0;
X2 - 0;
while (X2 < 18) {
	X3 = 0
	while (X3 < 48) {
		X4 = X4 ^ X5;
		X1 = X4;
		X3 = X3 + 8;
	}
	X1 = (X1 + X2) & 255;
	X2++;
}

8:
X1 = X2;
X3 = X4;
X5 = X6 >> 3;
if (X5 != 0) {
	while (--X5 > 0) {
		X1 = (X1 + 1) & 255;
		X6 = X7;
		X3 = (X6 + X3) & 255;
		X7 = X8;
		X8 = X6;
	}
}

9:
X1 = X2;
X3 = X1 & 65535;
X4 = X1 >> 16;

10:
if (--X1 == 0) {
	if (X2 == 2) 
		X1 = 6;
	else
		X1 = 5;
	X3 = X3 + (X4 & 63);
	X5 = X5 + (X3 & 63);
	X6 = X6 + (X5 & 63);
	X4 = X4 + (X6 & 63);
}
X7 = (X3 & 65535) | ((X5 & 65535) << 16);
X8 = (X6 & 65535) | ((X4 & 65535) << 16);

11:
  X1 = (X2 + (X4 << 3)) & -1;
  if (X1 < X2)
    X3++;
  X3 = X3 + (X4 >> 29);
  X2 = X1;

12:
X1 = X2 / 64;
if (X1 > 0) {
	X1 = X1 * 64;
	X3 = X3 + X1;
	X2 = X2 - X1;
}
if (X2 != 0) {
	X4 = X5;
	X6 = X2;
}

13:
X1 = X2;
if (X1 != 0) {
	if ((X3 >= 64) || ((X3 + X1) >= 64)) {
		X1 = 64 - X1;
		X4 = X4 + X1;
		X3 = X3 - X1;
		X2 = 0;
	} else {
		X2 = X2 + X3;
	}
}

14:
X1 = X2 >> 56;
X3 = X2 >> 48;
X4 = X2 >> 40;
X5 = X2 >> 32;
X6 = X2 >> 24;

15:
if (X1 == 48) {
	X2 = 0;
	while (X2 < 6) {
		X3 = X4;
		X6 = X3 >> 16;
		X7 = X3;
		X2++;
	}
}
if (X1 == 64) {
	X2 = 0;
	while (X2 < 8) {
		X3 = X4;
		X6 = X3 >> 24;
		X7 = X3 >> 8;
		X2++;
	}
}

16:
X1 = (X2 + (X3 << 3)) & -1;
if (X1 < X2)
	X4++;
if (X5 >= 8)
	X4 = X4 + (X3 >> 61);
X2 = X1;

17:
if (X1 != 0) {
	X2 = X3 - X1;
	if (X4 >= X2) {
		X4 = X4 - X2;
		X5 = X5 + X2;
	}
}

18:
X1 = X2;
if (X1 != 0) {
	if (X3 < (X4 - X1)) {
		X2 = X2 + X3;
	} else {
		X5 = X4 - X1;
		X3 = X3 - X5;
		X6 = X6 + X5;
		X2 = 0;
	}
}
X1 = X3 & ( ~ (X4 - 1));
X5 = X3 - X1;
if (X5 > 0) {
	X2 = X5;
}

19:
X3 = X4;
if (X1 == 128)
	X2 = 10;
else {
	if (X1 == 192)
		X2 = 12;
	else
		X2 = 14;
}
X5 = ((X6 << 24) ^ (X7 << 16) ^ (X8 << 8) ^ X9);

20:
if (X1 == 128) {
	while (X2 == 10) {
		X3 = X4 ^ X5;
		X6 = X7 ^ X3;
		X8 = X9 ^ X6;
		++X2;
	}
}
if (X1 == 192) {
	while (X2 == 8) {
		X8 = X4 ^ X6;
		X10 = X7 ^ X8;
		X11 = X9 ^ X10;
		++X2;
	}
}
if (X1 == 256) {
	while (X2 == 7) {
		X11 = X4 ^ X10;
		X12 = X7 ^ X11;
		X13 = X9 ^ X12;
		++X2;
	}
}

